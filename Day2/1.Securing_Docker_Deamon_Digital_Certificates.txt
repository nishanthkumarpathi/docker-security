Secring Docker Deamon

Setting up the Environmental Variables

Command 0

    export HOST=myserver.nishanth.com

Create a CA, server and client keys with OpenSSL

Step 1 - Generate the CA Private key and Public Key

Command 1

    openssl genrsa -aes256 -out ca-key.pem 4096

Command 2

    openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem

Command 3

    openssl genrsa -out server-key.pem 4096

Command 4

    openssl req -subj "/CN=$HOST" -sha256 -new -key server-key.pem -out server.csr

Step 2 - Allow External System to Access Docker

Command 5

    echo subjectAltName = DNS:$HOST,IP:127.0.0.1 >> extfile.cnf

Command 6


    echo extendedKeyUsage = serverAuth >> extfile.cnf

Command 7

    openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf

Step 3 - Generate Client Side Credentials

Command 8

    openssl genrsa -out key.pem 4096

Command 9

    openssl req -subj '/CN=client' -new -key key.pem -out client.csr

Command 10

    echo extendedKeyUsage = clientAuth > extfile-client.cnf

Step 3 - Generate Client Side Credentials ( Contd )

Command 11

    openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf

Command 12

    chmod -v 0400 ca-key.pem key.pem server-key.pem

Command 13

    chmod -v 0444 ca.pem server-cert.pem cert.pem

Step 4 - Running the Docker Deamon using TLS

Command 14

    dockerd --tlsverify --tlscacert=ca.pem --tlscert=server-cert.pem --tlskey=server-key.pem -H=0.0.0.0:2376

Command 15

    docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=$HOST:2376 version

Step 5 - Secure by default

Command 16

    mkdir -pv ~/.docker

Command 17

    cp -v {ca,cert,key}.pem ~/.docker

Command 18

    export DOCKER_HOST=tcp://$HOST:2376 DOCKER_TLS_VERIFY=1

Command 19

    docker ps